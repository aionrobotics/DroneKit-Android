/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE TERRAIN_REQUEST PACKING
package com.mavlink.common;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * Request for terrain data and terrain status
 */
public class msg_terrain_request extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_TERRAIN_REQUEST = 133;
    public static final int MAVLINK_MSG_LENGTH = 18;
    private static final long serialVersionUID = MAVLINK_MSG_ID_TERRAIN_REQUEST;

      
    /**
     * Bitmask of requested 4x4 grids (row major 8x7 array of grids, 56 bits)
     */
    public long mask;
      
    /**
     * Latitude of SW corner of first grid
     */
    public int lat;
      
    /**
     * Longitude of SW corner of first grid
     */
    public int lon;
      
    /**
     * Grid spacing
     */
    public int grid_spacing;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_TERRAIN_REQUEST;
        
        packet.payload.putUnsignedLong(mask);
        packet.payload.putInt(lat);
        packet.payload.putInt(lon);
        packet.payload.putUnsignedShort(grid_spacing);
        
        
        return packet;
    }

    /**
     * Decode a terrain_request message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.mask = payload.getUnsignedLong();
        this.lat = payload.getInt();
        this.lon = payload.getInt();
        this.grid_spacing = payload.getUnsignedShort();
        
        
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_terrain_request() {
        this.msgid = MAVLINK_MSG_ID_TERRAIN_REQUEST;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_terrain_request( long mask, int lat, int lon, int grid_spacing) {
        this.msgid = MAVLINK_MSG_ID_TERRAIN_REQUEST;

        this.mask = mask;
        this.lat = lat;
        this.lon = lon;
        this.grid_spacing = grid_spacing;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_terrain_request( long mask, int lat, int lon, int grid_spacing, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_TERRAIN_REQUEST;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.mask = mask;
        this.lat = lat;
        this.lon = lon;
        this.grid_spacing = grid_spacing;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_terrain_request(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_TERRAIN_REQUEST;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_terrain_request(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_TERRAIN_REQUEST;

        readJSONheader(jo);
        
        this.mask = (long)jo.optLong("mask");
        this.lat = (int)jo.optInt("lat");
        this.lon = (int)jo.optInt("lon");
        this.grid_spacing = (int)jo.optInt("grid_spacing");
        
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("mask", mask);
        jo.put("lat", lat);
        jo.put("lon", lon);
        jo.put("grid_spacing", grid_spacing);
        
        
        return jo;
    }

            
    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_TERRAIN_REQUEST - sysid:"+sysid+" compid:"+compid+" mask:"+mask+" lat:"+lat+" lon:"+lon+" grid_spacing:"+grid_spacing+"";
    }
}
        