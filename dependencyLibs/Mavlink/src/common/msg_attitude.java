/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE ATTITUDE PACKING
package com.mavlink.common;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right).
 */
public class msg_attitude extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_ATTITUDE = 30;
    public static final int MAVLINK_MSG_LENGTH = 28;
    private static final long serialVersionUID = MAVLINK_MSG_ID_ATTITUDE;

      
    /**
     * Timestamp (time since system boot).
     */
    public long time_boot_ms;
      
    /**
     * Roll angle (-pi..+pi)
     */
    public float roll;
      
    /**
     * Pitch angle (-pi..+pi)
     */
    public float pitch;
      
    /**
     * Yaw angle (-pi..+pi)
     */
    public float yaw;
      
    /**
     * Roll angular speed
     */
    public float rollspeed;
      
    /**
     * Pitch angular speed
     */
    public float pitchspeed;
      
    /**
     * Yaw angular speed
     */
    public float yawspeed;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_ATTITUDE;
        
        packet.payload.putUnsignedInt(time_boot_ms);
        packet.payload.putFloat(roll);
        packet.payload.putFloat(pitch);
        packet.payload.putFloat(yaw);
        packet.payload.putFloat(rollspeed);
        packet.payload.putFloat(pitchspeed);
        packet.payload.putFloat(yawspeed);
        
        
        return packet;
    }

    /**
     * Decode a attitude message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.time_boot_ms = payload.getUnsignedInt();
        this.roll = payload.getFloat();
        this.pitch = payload.getFloat();
        this.yaw = payload.getFloat();
        this.rollspeed = payload.getFloat();
        this.pitchspeed = payload.getFloat();
        this.yawspeed = payload.getFloat();
        
        
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_attitude() {
        this.msgid = MAVLINK_MSG_ID_ATTITUDE;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_attitude( long time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed) {
        this.msgid = MAVLINK_MSG_ID_ATTITUDE;

        this.time_boot_ms = time_boot_ms;
        this.roll = roll;
        this.pitch = pitch;
        this.yaw = yaw;
        this.rollspeed = rollspeed;
        this.pitchspeed = pitchspeed;
        this.yawspeed = yawspeed;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_attitude( long time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_ATTITUDE;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_boot_ms = time_boot_ms;
        this.roll = roll;
        this.pitch = pitch;
        this.yaw = yaw;
        this.rollspeed = rollspeed;
        this.pitchspeed = pitchspeed;
        this.yawspeed = yawspeed;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_attitude(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_ATTITUDE;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_attitude(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_ATTITUDE;

        readJSONheader(jo);
        
        this.time_boot_ms = (long)jo.optLong("time_boot_ms");
        this.roll = (float)jo.optFloat("roll");
        this.pitch = (float)jo.optFloat("pitch");
        this.yaw = (float)jo.optFloat("yaw");
        this.rollspeed = (float)jo.optFloat("rollspeed");
        this.pitchspeed = (float)jo.optFloat("pitchspeed");
        this.yawspeed = (float)jo.optFloat("yawspeed");
        
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("time_boot_ms", time_boot_ms);
        jo.put("roll", roll);
        jo.put("pitch", pitch);
        jo.put("yaw", yaw);
        jo.put("rollspeed", rollspeed);
        jo.put("pitchspeed", pitchspeed);
        jo.put("yawspeed", yawspeed);
        
        
        return jo;
    }

                  
    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_ATTITUDE - sysid:"+sysid+" compid:"+compid+" time_boot_ms:"+time_boot_ms+" roll:"+roll+" pitch:"+pitch+" yaw:"+yaw+" rollspeed:"+rollspeed+" pitchspeed:"+pitchspeed+" yawspeed:"+yawspeed+"";
    }
}
        