/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE LOCAL_POSITION_NED_COV PACKING
package com.mavlink.common;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
 */
public class msg_local_position_ned_cov extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV = 64;
    public static final int MAVLINK_MSG_LENGTH = 225;
    private static final long serialVersionUID = MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV;

      
    /**
     * Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
     */
    public long time_usec;
      
    /**
     * X Position
     */
    public float x;
      
    /**
     * Y Position
     */
    public float y;
      
    /**
     * Z Position
     */
    public float z;
      
    /**
     * X Speed
     */
    public float vx;
      
    /**
     * Y Speed
     */
    public float vy;
      
    /**
     * Z Speed
     */
    public float vz;
      
    /**
     * X Acceleration
     */
    public float ax;
      
    /**
     * Y Acceleration
     */
    public float ay;
      
    /**
     * Z Acceleration
     */
    public float az;
      
    /**
     * Row-major representation of position, velocity and acceleration 9x9 cross-covariance matrix upper right triangle (states: x, y, z, vx, vy, vz, ax, ay, az; first nine entries are the first ROW, next eight entries are the second row, etc.). If unknown, assign NaN value to first element in the array.
     */
    public float covariance[] = new float[45];
      
    /**
     * Class id of the estimator this estimate originated from.
     */
    public short estimator_type;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV;
        
        packet.payload.putUnsignedLong(time_usec);
        packet.payload.putFloat(x);
        packet.payload.putFloat(y);
        packet.payload.putFloat(z);
        packet.payload.putFloat(vx);
        packet.payload.putFloat(vy);
        packet.payload.putFloat(vz);
        packet.payload.putFloat(ax);
        packet.payload.putFloat(ay);
        packet.payload.putFloat(az);
        
        for (int i = 0; i < covariance.length; i++) {
            packet.payload.putFloat(covariance[i]);
        }
                    
        packet.payload.putUnsignedByte(estimator_type);
        
        
        return packet;
    }

    /**
     * Decode a local_position_ned_cov message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.time_usec = payload.getUnsignedLong();
        this.x = payload.getFloat();
        this.y = payload.getFloat();
        this.z = payload.getFloat();
        this.vx = payload.getFloat();
        this.vy = payload.getFloat();
        this.vz = payload.getFloat();
        this.ax = payload.getFloat();
        this.ay = payload.getFloat();
        this.az = payload.getFloat();
         
        for (int i = 0; i < this.covariance.length; i++) {
            this.covariance[i] = payload.getFloat();
        }
                
        this.estimator_type = payload.getUnsignedByte();
        
        
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_local_position_ned_cov() {
        this.msgid = MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_local_position_ned_cov( long time_usec, float x, float y, float z, float vx, float vy, float vz, float ax, float ay, float az, float[] covariance, short estimator_type) {
        this.msgid = MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV;

        this.time_usec = time_usec;
        this.x = x;
        this.y = y;
        this.z = z;
        this.vx = vx;
        this.vy = vy;
        this.vz = vz;
        this.ax = ax;
        this.ay = ay;
        this.az = az;
        this.covariance = covariance;
        this.estimator_type = estimator_type;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_local_position_ned_cov( long time_usec, float x, float y, float z, float vx, float vy, float vz, float ax, float ay, float az, float[] covariance, short estimator_type, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_usec = time_usec;
        this.x = x;
        this.y = y;
        this.z = z;
        this.vx = vx;
        this.vy = vy;
        this.vz = vz;
        this.ax = ax;
        this.ay = ay;
        this.az = az;
        this.covariance = covariance;
        this.estimator_type = estimator_type;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_local_position_ned_cov(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_local_position_ned_cov(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV;

        readJSONheader(jo);
        
        this.time_usec = (long)jo.optLong("time_usec");
        this.x = (float)jo.optFloat("x");
        this.y = (float)jo.optFloat("y");
        this.z = (float)jo.optFloat("z");
        this.vx = (float)jo.optFloat("vx");
        this.vy = (float)jo.optFloat("vy");
        this.vz = (float)jo.optFloat("vz");
        this.ax = (float)jo.optFloat("ax");
        this.ay = (float)jo.optFloat("ay");
        this.az = (float)jo.optFloat("az");
         
        JSONArray ja_covariance = jo.optJSONArray("covariance");
        for (int i = 0; i < Math.min(this.covariance.length, ja_covariance.length()); i++) {
            this.covariance[i] = (float)ja_covariance.getFloat(i);
        }
                
        this.estimator_type = (short)jo.optInt("estimator_type");
        
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("time_usec", time_usec);
        jo.put("x", x);
        jo.put("y", y);
        jo.put("z", z);
        jo.put("vx", vx);
        jo.put("vy", vy);
        jo.put("vz", vz);
        jo.put("ax", ax);
        jo.put("ay", ay);
        jo.put("az", az);
         
        JSONArray ja_covariance = new JSONArray();
        for (int i = 0; i < this.covariance.length; i++) {
            ja_covariance.put(this.covariance[i]);
        }
        jo.put("covariance", (Object)ja_covariance);
                
        jo.put("estimator_type", estimator_type);
        
        
        return jo;
    }

                            
    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV - sysid:"+sysid+" compid:"+compid+" time_usec:"+time_usec+" x:"+x+" y:"+y+" z:"+z+" vx:"+vx+" vy:"+vy+" vz:"+vz+" ax:"+ax+" ay:"+ay+" az:"+az+" covariance:"+covariance+" estimator_type:"+estimator_type+"";
    }
}
        