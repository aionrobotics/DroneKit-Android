/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE DEBUG_VECT PACKING
package com.mavlink.common;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * To debug something using a named 3D vector.
 */
public class msg_debug_vect extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_DEBUG_VECT = 250;
    public static final int MAVLINK_MSG_LENGTH = 30;
    private static final long serialVersionUID = MAVLINK_MSG_ID_DEBUG_VECT;

      
    /**
     * Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
     */
    public long time_usec;
      
    /**
     * x
     */
    public float x;
      
    /**
     * y
     */
    public float y;
      
    /**
     * z
     */
    public float z;
      
    /**
     * Name
     */
    public byte name[] = new byte[10];
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_DEBUG_VECT;
        
        packet.payload.putUnsignedLong(time_usec);
        packet.payload.putFloat(x);
        packet.payload.putFloat(y);
        packet.payload.putFloat(z);
        
        for (int i = 0; i < name.length; i++) {
            packet.payload.putByte(name[i]);
        }
                    
        
        
        return packet;
    }

    /**
     * Decode a debug_vect message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.time_usec = payload.getUnsignedLong();
        this.x = payload.getFloat();
        this.y = payload.getFloat();
        this.z = payload.getFloat();
         
        for (int i = 0; i < this.name.length; i++) {
            this.name[i] = payload.getByte();
        }
                
        
        
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_debug_vect() {
        this.msgid = MAVLINK_MSG_ID_DEBUG_VECT;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_debug_vect( long time_usec, float x, float y, float z, byte[] name) {
        this.msgid = MAVLINK_MSG_ID_DEBUG_VECT;

        this.time_usec = time_usec;
        this.x = x;
        this.y = y;
        this.z = z;
        this.name = name;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_debug_vect( long time_usec, float x, float y, float z, byte[] name, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_DEBUG_VECT;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_usec = time_usec;
        this.x = x;
        this.y = y;
        this.z = z;
        this.name = name;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_debug_vect(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_DEBUG_VECT;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_debug_vect(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_DEBUG_VECT;

        readJSONheader(jo);
        
        this.time_usec = (long)jo.optLong("time_usec");
        this.x = (float)jo.optFloat("x");
        this.y = (float)jo.optFloat("y");
        this.z = (float)jo.optFloat("z");
         
        JSONArray ja_name = jo.optJSONArray("name");
        for (int i = 0; i < Math.min(this.name.length, ja_name.length()); i++) {
            this.name[i] = (byte)ja_name.getInt(i);
        }
                
        
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("time_usec", time_usec);
        jo.put("x", x);
        jo.put("y", y);
        jo.put("z", z);
         
        JSONArray ja_name = new JSONArray();
        for (int i = 0; i < this.name.length; i++) {
            ja_name.put(this.name[i]);
        }
        jo.put("name", (Object)ja_name);
                
        
        
        return jo;
    }

             
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setName(String str) {
        int len = Math.min(str.length(), 10);
        for (int i=0; i<len; i++) {
            name[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<10; i++) {            // padding for the rest of the buffer
            name[i] = 0;
        }
    }

    /**
    * Gets the message, formated as a string
    */
    public String getName() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 10; i++) {
            if (name[i] != 0)
                buf.append((char) name[i]);
            else
                break;
        }
        return buf.toString();

    }
                         
    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_DEBUG_VECT - sysid:"+sysid+" compid:"+compid+" time_usec:"+time_usec+" x:"+x+" y:"+y+" z:"+z+" name:"+name+"";
    }
}
        