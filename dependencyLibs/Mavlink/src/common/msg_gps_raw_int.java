/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE GPS_RAW_INT PACKING
package com.mavlink.common;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * The global position, as returned by the Global Positioning System (GPS). This is
                NOT the global position estimate of the system, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate.
 */
public class msg_gps_raw_int extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_GPS_RAW_INT = 24;
    public static final int MAVLINK_MSG_LENGTH = 50;
    private static final long serialVersionUID = MAVLINK_MSG_ID_GPS_RAW_INT;

      
    /**
     * Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
     */
    public long time_usec;
      
    /**
     * Latitude (WGS84, EGM96 ellipsoid)
     */
    public int lat;
      
    /**
     * Longitude (WGS84, EGM96 ellipsoid)
     */
    public int lon;
      
    /**
     * Altitude (MSL). Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude.
     */
    public int alt;
      
    /**
     * GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX
     */
    public int eph;
      
    /**
     * GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX
     */
    public int epv;
      
    /**
     * GPS ground speed. If unknown, set to: UINT16_MAX
     */
    public int vel;
      
    /**
     * Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
     */
    public int cog;
      
    /**
     * GPS fix type.
     */
    public short fix_type;
      
    /**
     * Number of satellites visible. If unknown, set to 255
     */
    public short satellites_visible;
      
    /**
     * Altitude (above WGS84, EGM96 ellipsoid). Positive for up.
     */
    public int alt_ellipsoid;
      
    /**
     * Position uncertainty. Positive for up.
     */
    public long h_acc;
      
    /**
     * Altitude uncertainty. Positive for up.
     */
    public long v_acc;
      
    /**
     * Speed uncertainty. Positive for up.
     */
    public long vel_acc;
      
    /**
     * Heading / track uncertainty
     */
    public long hdg_acc;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_GPS_RAW_INT;
        
        packet.payload.putUnsignedLong(time_usec);
        packet.payload.putInt(lat);
        packet.payload.putInt(lon);
        packet.payload.putInt(alt);
        packet.payload.putUnsignedShort(eph);
        packet.payload.putUnsignedShort(epv);
        packet.payload.putUnsignedShort(vel);
        packet.payload.putUnsignedShort(cog);
        packet.payload.putUnsignedByte(fix_type);
        packet.payload.putUnsignedByte(satellites_visible);
        
        
        if(isMavlink2) {
            packet.payload.putInt(alt_ellipsoid);
        }
        if(isMavlink2) {
            packet.payload.putUnsignedInt(h_acc);
        }
        if(isMavlink2) {
            packet.payload.putUnsignedInt(v_acc);
        }
        if(isMavlink2) {
            packet.payload.putUnsignedInt(vel_acc);
        }
        if(isMavlink2) {
            packet.payload.putUnsignedInt(hdg_acc);
        }
        return packet;
    }

    /**
     * Decode a gps_raw_int message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.time_usec = payload.getUnsignedLong();
        this.lat = payload.getInt();
        this.lon = payload.getInt();
        this.alt = payload.getInt();
        this.eph = payload.getUnsignedShort();
        this.epv = payload.getUnsignedShort();
        this.vel = payload.getUnsignedShort();
        this.cog = payload.getUnsignedShort();
        this.fix_type = payload.getUnsignedByte();
        this.satellites_visible = payload.getUnsignedByte();
        
        
        if(isMavlink2) {
            this.alt_ellipsoid = payload.getInt();
        }
        if(isMavlink2) {
            this.h_acc = payload.getUnsignedInt();
        }
        if(isMavlink2) {
            this.v_acc = payload.getUnsignedInt();
        }
        if(isMavlink2) {
            this.vel_acc = payload.getUnsignedInt();
        }
        if(isMavlink2) {
            this.hdg_acc = payload.getUnsignedInt();
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_gps_raw_int() {
        this.msgid = MAVLINK_MSG_ID_GPS_RAW_INT;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_gps_raw_int( long time_usec, int lat, int lon, int alt, int eph, int epv, int vel, int cog, short fix_type, short satellites_visible, int alt_ellipsoid, long h_acc, long v_acc, long vel_acc, long hdg_acc) {
        this.msgid = MAVLINK_MSG_ID_GPS_RAW_INT;

        this.time_usec = time_usec;
        this.lat = lat;
        this.lon = lon;
        this.alt = alt;
        this.eph = eph;
        this.epv = epv;
        this.vel = vel;
        this.cog = cog;
        this.fix_type = fix_type;
        this.satellites_visible = satellites_visible;
        this.alt_ellipsoid = alt_ellipsoid;
        this.h_acc = h_acc;
        this.v_acc = v_acc;
        this.vel_acc = vel_acc;
        this.hdg_acc = hdg_acc;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_gps_raw_int( long time_usec, int lat, int lon, int alt, int eph, int epv, int vel, int cog, short fix_type, short satellites_visible, int alt_ellipsoid, long h_acc, long v_acc, long vel_acc, long hdg_acc, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_GPS_RAW_INT;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_usec = time_usec;
        this.lat = lat;
        this.lon = lon;
        this.alt = alt;
        this.eph = eph;
        this.epv = epv;
        this.vel = vel;
        this.cog = cog;
        this.fix_type = fix_type;
        this.satellites_visible = satellites_visible;
        this.alt_ellipsoid = alt_ellipsoid;
        this.h_acc = h_acc;
        this.v_acc = v_acc;
        this.vel_acc = vel_acc;
        this.hdg_acc = hdg_acc;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_gps_raw_int(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_GPS_RAW_INT;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_gps_raw_int(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_GPS_RAW_INT;

        readJSONheader(jo);
        
        this.time_usec = (long)jo.optLong("time_usec");
        this.lat = (int)jo.optInt("lat");
        this.lon = (int)jo.optInt("lon");
        this.alt = (int)jo.optInt("alt");
        this.eph = (int)jo.optInt("eph");
        this.epv = (int)jo.optInt("epv");
        this.vel = (int)jo.optInt("vel");
        this.cog = (int)jo.optInt("cog");
        this.fix_type = (short)jo.optInt("fix_type");
        this.satellites_visible = (short)jo.optInt("satellites_visible");
        
        this.alt_ellipsoid = (int)jo.optInt("alt_ellipsoid");
        this.h_acc = (long)jo.optLong("h_acc");
        this.v_acc = (long)jo.optLong("v_acc");
        this.vel_acc = (long)jo.optLong("vel_acc");
        this.hdg_acc = (long)jo.optLong("hdg_acc");
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("time_usec", time_usec);
        jo.put("lat", lat);
        jo.put("lon", lon);
        jo.put("alt", alt);
        jo.put("eph", eph);
        jo.put("epv", epv);
        jo.put("vel", vel);
        jo.put("cog", cog);
        jo.put("fix_type", fix_type);
        jo.put("satellites_visible", satellites_visible);
        
        jo.put("alt_ellipsoid", alt_ellipsoid);
        jo.put("h_acc", h_acc);
        jo.put("v_acc", v_acc);
        jo.put("vel_acc", vel_acc);
        jo.put("hdg_acc", hdg_acc);
        
        return jo;
    }

                                  
    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_GPS_RAW_INT - sysid:"+sysid+" compid:"+compid+" time_usec:"+time_usec+" lat:"+lat+" lon:"+lon+" alt:"+alt+" eph:"+eph+" epv:"+epv+" vel:"+vel+" cog:"+cog+" fix_type:"+fix_type+" satellites_visible:"+satellites_visible+" alt_ellipsoid:"+alt_ellipsoid+" h_acc:"+h_acc+" v_acc:"+v_acc+" vel_acc:"+vel_acc+" hdg_acc:"+hdg_acc+"";
    }
}
        